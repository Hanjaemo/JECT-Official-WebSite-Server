plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.ject'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // DevTools
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'


    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'


    // QueryDSL
    implementation 'com.querydsl:querydsl-apt:5.0.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-core:5.0.0'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.awaitility:awaitility-scala:4.2.1'

    // TestContainers
    testImplementation 'org.testcontainers:junit-jupiter:1.20.4'
    testImplementation 'org.testcontainers:mysql:1.20.4'
    testImplementation 'org.testcontainers:rabbitmq:1.20.4'

    //p6spy
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.2"
}

configurations {
    compileJava{
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

test {
    useJUnitPlatform(){
        // throughput test 제외
        excludeTags 'throughput'
    }
    // test profile로 테스트
    systemProperty 'spring.profiles.active', 'test'
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorPath = configurations.querydsl
}

sourceSets {
    main.java.srcDirs += [ generated ]
}

clean {
    delete file(generated)
}
